import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 * The objective of the class is to generate file which will be containing
 * all the contents of all the files present in a folder
 * @author tesahu
 *
 */
public class WriteToFile {
	public static String myFile = "main.txt";
	//public static String destinationFolder = "output";
	public static void main(String[] args) {
		
				String srcDir = "C:\\Tejeswar1\\ASC-workspace\\ASC";
				
				File currentDir = new File(srcDir); // current directory
				displayDirectoryContents(currentDir);
			}
	public static void displayDirectoryContents(File dir) {
		try {
			File[] files = dir.listFiles();
			for (File file : files) {
				if(!file.isHidden()){
				if (file.isDirectory()) {
					//System.out.println("directory:" + file.getCanonicalPath());
					displayDirectoryContents(file);
				} else {
					System.out.println("file:" + file.getCanonicalPath());
					//System.out.println("file:" + file.getAbsolutePath());
					
								
					readAndWriteFile(file,myFile);
					//We need to print >>>>>>>>>>>>>>> as last line in the myFile.Otherwise when we read the main.txt
					//then the last record present in that main.txt will not get created as a single file.That is why the 
					//the below method is intended for
					writeLastLine(myFile);
					
				}
			}
			}
			
		} catch ( Exception  e) {
			e.printStackTrace();
		}
	}
	private static void writeLastLine(String myFile2) throws Exception {
		BufferedReader br = new BufferedReader(new FileReader(myFile2));
		BufferedWriter bw =  new BufferedWriter(new FileWriter(new File(myFile2), true));
		bw.write(">>>>>>>>>>>>>>>");
		bw.close();
		br.close();
		
	}
	private static void readAndWriteFile(File file, String myFile2) throws IOException {
		//System.out.println("Processed file:"+file.getName()+":"+file.getAbsoluteFile());
		BufferedReader br = new BufferedReader(new FileReader(file));
		BufferedWriter bw =  new BufferedWriter(new FileWriter(new File(myFile), true));
		String line = "";
		String encriptedFileName = ">>>>>>>>>>>>>>"+file.getAbsolutePath();
		//bw.write(MyPasswordEncrDecr.encrypt(encriptedFileName));
		bw.write(encriptedFileName);
		bw.newLine();
		while((line = br.readLine()) != null){
			//If you just want to write the lines without encoding just comment it out
			//line = MyPasswordEncrDecr.encrypt(line);
			
			bw.write(line);
			bw.newLine();
			
		}
		//bw.write(">>>>>>>>>>>>>>>");
		bw.newLine();
		bw.close();
		br.close();
	}

}
================================================================================

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class RecursiveFileDisplay {
public static String myFile = "main.txt";


	public static void main(String[] args) {

		String srcDir = "C:\\Tejeswar1\\my_workspace\\IncompatibleTest";
		File currentDir = new File(srcDir); // current directory
		displayDirectoryContents(currentDir);
	}

	public static void displayDirectoryContents(File dir) {
		try {
			File[] files = dir.listFiles();
			for (File file : files) {
				if(!file.isHidden()){
				if (file.isDirectory()) {
					//System.out.println("directory:" + file.getCanonicalPath());
					displayDirectoryContents(file);
				} else {
					//System.out.println("     file:" + file.getCanonicalPath());
					if(!("jdo.files".equals(file.getName()))){
					readAndWriteFile(file,myFile);
					}
					
				}
			}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static void readAndWriteFile(File file, String myFile2) throws IOException {
		System.out.println("Processed file:"+file.getName()+":"+file.getAbsoluteFile());
		BufferedReader br = new BufferedReader(new FileReader(file));
		BufferedWriter bw =  new BufferedWriter(new FileWriter(new File(myFile), true));
		String line = "";
		String encriptedFileName = ">>>>>>>>>>>>>>"+file.getName();
		bw.write(MyPasswordUtil.encrypt(encriptedFileName));
		bw.newLine();
		while((line = br.readLine()) != null){
			//If you just want to write the lines without encoding just comment it out
			//line = MyPasswordEncrDecr.encrypt(line);
			
			bw.write(line);
			bw.newLine();
			
		}
		bw.write("==========>");
		bw.newLine();
		bw.close();
		br.close();
	}
	public void printUsage(){
		/*
		 * Each time you run this programme,make sure that the output of this programme that is main.txt
		 * is not present in this project.If present delete this file otherwise again the output of this programme
		 * will get appended in the main.txt file
		 */
	}

}
===============================
DQoNCnB1YmxpYyBjbGFzcyBNeUtleSB7DQoNCgkNCglwcml2YXRlIFN0cmluZyBkZWZhdWx0QUVTS2V5ID0gIjUxMGYxMTYxN2YwNjQ4MTMxNjI1NjUwZTM3NmUyNjI5IjsNCgkNCglkeW5hbWljQUVTS2V5PSI1NjYwODdlMzkxZmI1YWVkYWY2YzQ5MDc5NWYzMDg1OSw3OTg1YzFhY2QzN2IwODNlMTlkNzA5NWRhZWY1NWI4YSI7DQoJcHJpdmF0ZSBTdHJpbmcgZHluYW1pY0FFU0tleT0iOWNmZjZjNzRiMGMwZmIzZTlmZDBhNTQ0ODMwMGUzYjEsNjQzMDE5NjYwNTk4YWY0ODc2NWQ3YTFhMGNmMWQyOTYiOw0KCQ0KCXB1YmxpYyBTdHJpbmcgZ2V0RGVmYXVsdEFFU0tleSgpIHsNCgkJcmV0dXJuIGRlZmF1bHRBRVNLZXk7DQoJfQ0KDQoJcHVibGljIFN0cmluZyBnZXREeW5hbWljQUVTS2V5KCkgew0KCQlyZXR1cm4gZHluYW1pY0FFU0tleTsNCgl9DQoNCglwdWJsaWMgdm9pZCBzZXREeW5hbWljQUVTS2V5KFN0cmluZyBkeW5hbWljQUVTS2V5KSB7DQoJCXRoaXMuZHluYW1pY0FFU0tleSA9IGR5bmFtaWNBRVNLZXk7DQoJfQ0KDQp9DQo=
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class ReadMainFile {
	public static String mainFile = "C:\\Tejeswar1\\DataStructures\\ReadAllFileRecursively\\main.txt";
public static String destFolder = "output";
public static void main1(String[] args) {
	String fileName = "C:\\Users\\Desktop\\customtasks\\GetSortedCustomWorkflowInput.wfdx";
//System.out.println(fileName.substring(0,fileName.lastIndexOf("\\")));
	System.out.println(fileName.substring(fileName.indexOf("\\"),fileName.lastIndexOf("\\")));
System.out.println(fileName.substring(fileName.lastIndexOf("\\")+1,fileName.length()));
}
	public static void main(String[] args) throws Exception {
	//testGetMatchedPattern();
	
	//testGetClassName();
	File outputDir = new File(destFolder);
	outputDir.mkdirs();
	BufferedReader br = new BufferedReader(new FileReader(mainFile));
	String line = "";
	String fileName = "DefaultFileName";
	//br.readLine();
	List<String> l = null;
	while((line = br.readLine()) != null){
		line = line.trim();
		//line = MyPasswordEncrDecr.descrypt(line);
		if(line.startsWith(">>>>>>>>>>>>>>")){
			if(l!=null && l.size()>0){
				writeToFile2(destFolder,fileName,l);
			}
			fileName= line.substring(line.lastIndexOf(">")+1,line.length());
			System.out.println("fileName:"+fileName);
			l= new ArrayList<>();
			
		}
		else{
			l.add(line);
		}
	}
}
private static void writeToFile2(String outputDir,String fileName, List<String> l) throws Exception {
	
	String parentDir = outputDir+fileName.substring(fileName.indexOf("\\"),fileName.lastIndexOf("\\"));
	System.out.println(parentDir);
	File parentDirc = new File(parentDir);
	if(!parentDirc.exists()){
		parentDirc.mkdirs();
	}
	String singleFileName = fileName.substring(fileName.lastIndexOf("\\")+1,fileName.length());
	System.out.println(parentDirc+singleFileName);
	File file1 = new File(parentDirc+"\\"+singleFileName);
	file1.createNewFile();
	writeListToFile(file1,l);
}
private static void writeListToFile(File file1, List<String> l) throws Exception {
	
	BufferedWriter bw =  new BufferedWriter(new FileWriter(file1));
	for(String stmt:l){
	bw.write(stmt);
	bw.newLine();
	}
	bw.close();
}
}
